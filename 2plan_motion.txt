이 문제는 실제 손의 움직임이 없는데도 모션이 감지되어 영상이 저장되는 현상입니다.
즉, "거짓 양성(false positive)"이 자주 발생하는 상황입니다.

원인 분석
배경 안정화가 충분하지 않음

배경 프레임이 충분히 안정화되지 않으면, 작은 조명 변화나 카메라 노이즈도 모션으로 오인될 수 있습니다.
특히 조명 변화, 카메라 자동 노출, 센서 노이즈 등은 육안으로는 거의 보이지 않지만 픽셀 값에는 영향을 줍니다.
DELTA_THRESHOLD(픽셀 차이 임계값)이 너무 낮음

DELTA_THRESHOLD = 25로 설정되어 있는데, 이 값이 낮으면 미세한 밝기 변화도 감지됩니다.
motion_threshold(변화 픽셀 수 임계값)가 너무 낮음

CURRENT_SENSITIVITY = 'low'일 때 motion_threshold = 2000입니다.
해상도 640x480에서 2000픽셀은 화면의 약 0.65%에 해당합니다.
조명 변화, 노이즈, 카메라의 미세한 흔들림만으로도 이 정도 픽셀 변화가 발생할 수 있습니다.
배경 업데이트 방식

배경이 너무 자주 또는 너무 느리게 업데이트되면, 실제 변화가 아닌데도 차이가 누적되어 감지될 수 있습니다.
영상 압축 노이즈(MJPEG)

MJPEG 스트림의 압축 노이즈도 픽셀 변화로 감지될 수 있습니다.
해결 방법 및 개선 방안
DELTA_THRESHOLD 값 높이기

예: 25 → 35~50 등으로 조정
너무 낮으면 미세한 노이즈도 감지됨
motion_threshold 값 높이기

예: 2000 → 4000~6000 등으로 조정
실제 손 움직임이 화면의 몇 % 이상일 때만 감지하도록 설정
배경 안정화 프레임 수 늘리기

예: 60프레임 → 100프레임 등으로 늘려서 초기 배경을 더 안정적으로 만듦
배경 업데이트 속도 조정

배경 업데이트 비율을 더 낮추거나, 모션이 감지되지 않을 때만 천천히 업데이트
노이즈 필터 추가

프레임 차이(thresh)에서 작은 영역(예: 500픽셀 이하)은 무시하도록 추가 필터링
컨투어의 최소 면적을 더 크게 설정
디버그 출력으로 실제 changed_pixels 값 확인

실제로 변화가 감지되는 프레임에서 changed_pixels 값이 어떻게 나오는지 확인 후, 임계값을 조정

결론
DELTA_THRESHOLD와 motion_threshold 값을 높이고,
배경 안정화 프레임 수를 늘리며,
작은 변화 무시(컨투어 최소 면적, changed_pixels 최소값) 로직을 추가하면
실제 손의 움직임만 감지하고, 노이즈나 미세 변화는 무시할 수 있습니다.
이렇게 조정한 뒤, 디버그 출력을 통해 실제 변화량을 관찰하면서 임계값을 최적화하는 것이 가장 효과적입니다.

현재 방식의 문제점:

  1. 모션 감지 → 스트림 중단 → 녹화 시작 (31초)
  2. 중요한 순간을 놓침 - 모션이 발생한 그 순간이 누락됨

  제안하는 개선 방안:

  방법 1: 프리버퍼링 (Pre-buffering) - 권장

  - 항상 최근 10초를 메모리에 버퍼링
  - 모션 감지 시: 버퍼 10초 + 추가 20초 = 총 30초
  - 장점: 모션 이전 상황 포착
  - 단점: 메모리 사용량 증가

  방법 2: 지속적 임시 녹화 + 병합

  - 10초 단위 임시 파일로 계속 녹화
  - 모션 감지 시: 이전 파일 + 현재 녹화 병합
  - 장점: 메모리 효율적
  - 단점: 디스크 I/O 증가

  방법 3: rpicam-vid의 circular buffer 옵션 활용

  - --circular 옵션으로 버퍼 크기 지정
  - 모션 감지 시 버퍼 내용 저장
  - 장점: 네이티브 지원, 효율적
  - 단점: rpicam-vid 버전에 따라 지원 여부 확인 필요

  프리버퍼링 구현이 가장 실용적입니다.

  ● 카메라 스트림이 즉시 종료되는 문제가 발생했습니다. 프리버퍼링이 카메라를
  동시에 사용하려고 해서 충돌이 발생한 것으로 보입니다. rpicam-vid는 한 번에
  하나의 인스턴스만 카메라에 접근할 수 있습니다.

● 문제는 두 개의 rpicam-vid 프로세스가 동시에 카메라에 접근하려고 해서
  발생했습니다:
  1. 프리버퍼링용 rpicam-vid
  2. 모션 감지용 rpicam-vid

  해결 방법: 단일 MJPEG 스트림에서 프레임을 추출하여 모션 감지와 버퍼링을 동시에
   수행

● 프리버퍼링 시스템 구현 완료

  주요 개선사항:

  해결된 문제:

  - 카메라 동시 접근 문제 해결: 단일 MJPEG 스트림에서 프레임을 추출하여 모션
  감지와 버퍼링 동시 수행
  - 프레임 기반 버퍼링: JPEG 형식으로 메모리에 300프레임(10초) 순환 버퍼 유지

  동작 방식:

  1. 모션 감지 중: 프레임을 순환 버퍼에 지속 저장
  2. 모션 감지 시:
    - 버퍼의 10초를 MP4로 저장
    - 스트림 중단 후 20초 추가 녹화
    - ffmpeg으로 병합하여 총 30초 영상 생성

  장점:

  - 모션 이전 10초 상황 포착
  - 단일 카메라 스트림으로 효율적 운영
  - 메모리 효율적인 JPEG 압축 버퍼링

  사용법:

  python3 detection.py

  모션이 감지되면 자동으로 이전 10초 + 이후 20초 = 총 30초 영상이 저장됩니다.

  방안 1: 독립 프로세스 (권장) ✅

  # 각 카메라별 독립 Python 프로세스
  python3 detection_cam0.py   # cam0
  python3 detection_cam1.py   # cam1
  장점:
  - 완전한 독립성
  - 한 카메라 오류가 다른 카메라에 영향 없음
  - 간단한 구현

  단점:
  - 메모리 사용량 증가
  - 프로세스 간 통신 필요 시 복잡

  여전히 23초짜리 동영상으로 저장됩니다. 
  ● 🛠️ 프리버퍼링 시스템 수정 완료

  🔍 발견된 문제점:

  1. 프레임률 불일치: 30fps 가정했으나 실제는 25fps 내외
  2. 해상도 불일치: 모션감지(640x480) vs 녹화(1280x720)
  3. 병합 시간 제어 부재: ffmpeg에서 시간 제한 없음

  ✅ 적용된 수정사항:

  1. 프레임 버퍼 조정 
  # 변경 후: 10초 * 25fps = 250 프레임 (여유있게) =>  이 부분이 아직 문제가 되는 것으로 보임.
  self.frame_buffer = deque(maxlen=pre_buffer * 25)
  => 31초 녹화로 결과물은 30초동영상 저장은 디텍션 없을 때 잘이루어짐.참고:rec_cam0.py

  2. 해상도 변환 명시적 처리

  # 640x480 프레임을 1280x720으로 업스케일 => 잘 됨
  frame_resized = cv2.resize(frame, (self.width, self.height))
  out.write(frame_resized)

  3. ffmpeg 병합 옵션 강화

  ffmpeg -f concat -safe 0 -i list.txt \
    -c:v libx264 \
    -t 30 \        # 30초로 정확히 제한
    -r 25 \        # 25fps 고정 
    -y output.mp4
  => 현재 cam1/  영상 결과물은 23초로 저장됨.

  🎯 예상 결과:

  - 정확한 30초 영상 생성 => 현재 cam1/  영상 결과물은 23초로 저장됨.
  - 프리버퍼 10초 + 포스트 20초 구성  => 이 부분 정확히 구현 안됨.
  - 일관된 1280x720 해상도
  - 25fps 안정적 프레임률 

  나의 의견입니다.
  1.프리프레임(10초) + 20초 녹화 영상의 결합 부분에 대한 로그 강화. 실제로 구현 되는 지 확인 필요.
  2.프리프레임(10초) 동안 다른 디텍이 발생하면 프리프레임은 다시 생성되나요? 어떻게 되나요?
  3.프리프레임을 3초 정도로 줄이면 정확성 개선에 도움이 될까요? 프리프레임 3초 + 27초 녹화 영상 => 결과물 생성.


1. 프레임 버퍼 정확도 개선
    - skip_frames를 고려한 실제 fps 계산 (30fps/3 = 10fps)
    - 프리버퍼: 3초 × 10fps = 30프레임으로 정확히 설정
  2. 프레임레이트 통일 (30fps)
    - OpenCV 프리버퍼: 25fps → 30fps
    - rpicam-vid 포스트버퍼: 30fps (유지)
    - ffmpeg 병합: 25fps → 30fps
  3. 버퍼 시간 조정
    - 프리버퍼: 10초 → 3초
    - 포스트버퍼: 20초 → 27초
    - 총 30초 유지
  4. 로그 강화
    - 버퍼 저장 시 실제 시간과 프레임 수 표시
    - 병합 전 pre/post 버퍼 시간 명시
    - 병합 후 실제 duration 검증
  5. duration 검증 추가
    - ffprobe로 최종 영상 길이 확인
    - 예상값(30초)과 차이 표시
  

  shinho@raspberrypi:~/shinho/livecam $ python detection_cam0.py
Motion Detection System - Camera 0
========================================
Motion Detection System Initialized - Camera 0
   Camera: 640x480
   Detector: SIMPLE
   민감도: LOW | 임계값: 10000px | 쿨다운: 12s | 낮음 - 팔 전체를 크게 흔들 때 정도 감지
   Recording: True
   Recording Resolution: 1280x720
   Pre-buffer: 3s (@ 10fps capture)
   Post-buffer: 27s (@ 30fps capture)
   Total Duration: 30s

🔧 설정 변경 방법:
   민감도 변경: 코드 상단의 CURRENT_SENSITIVITY 변수를 수정하세요.
   감지기 변경: 코드 상단의 DETECTOR_TYPE 변수를 수정하세요.

사용 가능한 민감도 설정:
  very_low: 15000px, 15s - 매우 낮음 - 사람이 화면을 거의 다 가로질러야 감지
  low: 10000px, 12s - 낮음 - 팔 전체를 크게 흔들 때 정도 감지 ← 현재 설정
  medium: 6000px, 8s - 보통 - 팔이나 손 전체가 움직일 때만 감지
  high: 3000px, 5s - 높음 - 손가락 등 작은 물체 움직임도 감지
  very_high: 1000px, 3s - 매우 높음 - 미세한 변화, 노이즈까지 감지

Testing camera...
Camera OK
Camera stream started
Motion detection started (Ctrl+C to stop)
Pre-buffering enabled: 3s circular buffer @ 10fps
Monitoring for motion...
Buffer: 3.0s (30 frames @ 10fps)
Background stabilized with 60 frames - motion detection active
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
[07:31:23] Processed 300 frames
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
[07:31:33] Processed 600 frames
Simple Debug: 0 changed pixels
Motion detected: 21701 changed pixels
[2025-09-08 07:31:34] 모션이 디텍되었습니다. (SimpleMotionDetector)
Stopping detection stream for post-buffer recording...
Motion detected - saving pre-buffer (3s) + recording post-buffer (27s)
Expected total duration: 30s
Pre-buffer saved: buffer_20250908_073134.mp4 (0.3MB, 3.0s @ 30fps output)
Recording 27s post-buffer...
Post-buffer recording in progress...
Merging: pre-buffer (3s) + post-buffer (27s)
Recording completed: motion_event_cam0_20250908_073134.mp4 (0.0MB)
Restarting detection stream...
Camera stream started
Detection stream resumed
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
[07:32:15] Processed 900 frames
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Video merged successfully: motion_event_cam0_20250908_073134.mp4 (5.6MB)
  Final duration: 30.0s (expected: 30s, diff: 0.0s)
Recording saved: motion_event_cam0_20250908_073134.mp4
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
[07:32:24] Processed 1200 frames
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
Buffer: 3.0s (30 frames @ 10fps)
Simple Debug: 0 changed pixels
Simple Debug: 0 changed pixels
[07:32:33] Processed 1500 frames
Simple Debug: 0 changed pixels
Motion detected: 32309 changed pixels
[2025-09-08 07:32:35] 모션이 디텍되었습니다. (SimpleMotionDetector)
Stopping detection stream for post-buffer recording...
Motion detected - saving pre-buffer (3s) + recording post-buffer (27s)
Expected total duration: 30s
Pre-buffer saved: buffer_20250908_073235.mp4 (0.3MB, 3.0s @ 30fps output)
Recording 27s post-buffer...
Post-buffer recording in progress...
^C
Shutting down motion detection system...
Checking interrupted recording: motion_event_cam0_20250908_073235.mp4
Merging: pre-buffer (3s) + post-buffer (27s)
Recording file too small (48 bytes), deleting: motion_event_cam0_20250908_073235.mp4
Deleted corrupted file: motion_event_cam0_20250908_073235.mp4
Cleaning up temporary files...
Cleaned up temp file: temp_post_20250908_073235.h264
Cleaned up list file: concat_motion_event_cam0_20250908_073235.txt
Motion detection system stopped
Motion detection system stopped

- 프로세스 종료 문제 해결

  주요 변경 내용:

  1. 병합 스레드 관리 개선
    - merge_thread 추적 변수 추가
    - daemon=True → daemon=False로 변경 (정상 종료 보장)
    - 스레드 종료 신호 (merge_thread_stop) 추가
  2. 프로세스 종료 개선
    - SIGTERM 먼저 시도 (정상 종료)
    - 2초 대기 후 SIGKILL (강제 종료)
    - 병합 스레드 종료 대기 (3초 타임아웃)
  3. 시그널 핸들러 강화
  # 모든 스레드 종료 대기
  for thread in threading.enumerate():
      if thread != threading.main_thread() and thread.is_alive():
          thread.join(timeout=1)
  4. 정리 순서 최적화
    - 녹화 프로세스 종료 → 파일 확인 → 버퍼 정리 → 임시 파일 정리

  이제 Ctrl+C 종료 시:
  - 모든 subprocess가 정상 종료됨
  - 백그라운드 스레드가 완료될 때까지 대기
  - 프롬프트가 정상적으로 복구됨

  - 프리버퍼 정확도 개선

  주요 변경 내용:

  1. 프레임 복제로 정확한 5초 구현
    - 10fps로 캡처한 50프레임을 각각 3번씩 복제
    - 50프레임 × 3 = 150프레임 @ 30fps = 5초
    - 이제 프리버퍼가 정확히 5초가 됩니다
  2. ffmpeg 최적화
    - 타임아웃: 30초 → 60초
    - -preset fast 추가 (인코딩 속도 향상)
    - -pix_fmt yuv420p 추가 (호환성 향상)
    - -r 30 추가 (프레임레이트 통일)
  3. 향상된 로그
    - Duration 불일치 시 경고 메시지
    - 실제 vs 예상 duration 명확히 표시

  예상 결과:

  Pre-buffer saved: buffer_20250908_075200.mp4
    - Frames: 50 frames @ 10fps capture
    - Duration: 5.0s (expected: 5.0s)  ✅
    - File size: 0.5MB

  이제 프리버퍼가 정확히 5초로 저장되고, ffmpeg 병합도 안정적으로 작동할
  것입니다!

타임아웃 종류 설명

  1. ffmpeg 병합 타임아웃 (30초 → 60초) ✅

  result = subprocess.run(merge_cmd, capture_output=True, timeout=60)
  - 이것은 ffmpeg 명령어 실행 시간 제한입니다.
  - 영상 병합 작업이 60초 내에 완료되어야 함.
  - 모션 감지와는 무관합니다.

  2. 모션 감지 쿨다운 (현재 12초)

  SENSITIVITY_LEVELS = {
      'low': {
          'threshold': 10000,
          'cooldown': 12,  # ← 이것이 다음 감지까지 대기 시간
      }
  }
  - 모션 감지 후 12초 동안 새로운 모션을 무시
  - 이 시간이 다음 모션 감지까지의 실제 대기 시간

  실제 타임라인

  모션 감지 → 녹화(30초) → 병합(최대 60초 허용) → 12초 후 다시 감지 가능
       ↑                                              ↑
       └─────────────── 12초 쿨다운 ──────────────────┘

  요약:

  - ffmpeg 타임아웃 60초: 병합 작업 시간 제한 (실제로는 보통 5-10초면 완료)
  - 모션 감지 쿨다운 12초: 다음 모션 감지까지 대기 시간
  - 다음 모션은 12초 후에 감지 가능합니다!